*DIRS                   ; the directories we want to index '*=disable command'
SPECS *.F               ; The file spec masks we want to index
*EXCLUDE TEST.F         ; an experimental file, it doesn't need to be indexed
KEEPPATH OFF            ; should we keep the file paths in index file
AFTER 0                 ; start looking after column 0 (a number)
BEFORE 132              ; stop looking at column 132 (a number)
STOPAT \                ; stop looking when "\" found
TYPE 0 ": "
TYPE 0 "CODE "
TYPE 0 "USER "
TYPE 0 "CREATE "
TYPE 0 "CONSTANT "
TYPE 0 "VALUE "
TYPE 0 "DEFER "
TYPE 0 "VARIABLE "
TYPE 0 "2VARIABLE "
TYPE 0 "ARRAY "
;
;       The semicolon character in the first column causes the
;       index compiler to stop looking at this configuration file.

; This file is for Firmware Studio files
; To build an index for a specific project, you could copy your files and give
; them all file extensions .F.


HYPERTEXT COMPILER DOCUMENTATION                                by Tom Zimmer

  The hypertext compile function of WinView makes it easy to build hypertext
index files for the WinView editor.

  Various compielr directives can be included in this file to allow the
hypertext compiler to build WINVIEW.NDX containing the index references to all
of the words you want to access easily.


COMPILER DIRECTIVES

  Six index compiler directives are currently supported, they each start
with the word "TYPE" followed by a type number and a quoted "string" parameter:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        TYPE 0 "string"

Pick up and index the word IMMEDIATELY following string. No space delimiter is
required. If you want to space delimit the string, include a space within the
quotes. Examples: ": "  "CONSTANT " "CODE " etc.

This type can pick up words following, as will be the case with the above
examples, or you can pick up words starting with a character by not including a
space at the end of the string. An example of this is the graphic symbol above
"ø", which compiles any word starting with this symbol. That is any hypertext
destination link.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        TYPE 1 ":"

Pick up and index the word preceeding this symbol. That is index all words that
end in a ":" character. Normally used for assembler labels.

                NAME:

This will include name in the index file.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        TYPE 2 "LABEL " n

Pick up and index the word at the start of this line, skipping 'n' words in the
ine where "string" was found. This is typically used to include references to
the assembler word LABEL as it is used in some assemblers, but it is also
useful for indexing the ANS Forth document.

                x.x.x.x SYMBOL_NAME     LABEL

SYMBOL_NAME will be included in the index file.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        TYPE 3 "string "

Index a matching word as found at the start of a line.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        TYPE 4 "STRING " n

Pick up and index the word preceeding "string", skip 'n' words preceeding
"string".

                SYMBOL  STRING

SYMBOL will be included in the index file.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

        TYPE 5 "string of where to stop"

Stop indexing any file when "string of where to stop" is found in a line.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


MULTIPLE INDEX COMMANDS

  Several of the above index commands can be included one per line before the
line starting with a ";" character. The index compiler currently supports
sixty four (64) index compiler commands in the above format.


EXAMPLE LINES FOR FORTH

  The following lines can be included in HYPER.NDX tell the compiler to
index forth functions, constants and variables.  These are only examples
of the type of entries that can be incuded.

        TYPE 0 "CODE "
        TYPE 0 "CREATE "
        TYPE 0 "CONSTANT "
        TYPE 0 "DEFER "
        TYPE 0 "VARIABLE "
        TYPE 0 "VALUE "
        TYPE 0 "ARRAY "


